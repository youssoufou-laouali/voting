{"version":3,"sources":["Item.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","className","style","maxWidth","src","profile","alt","href","onClick","voter","bind","this","id","vote","name","description","width","display","App","state","renseignement","e","preventDefault","resultat","map","item","setState","sort","a","b","key","margin","minWidth","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMA8BeA,MA5Bf,SAAcC,GAGF,OAGI,yBAAKC,UAAU,YAAYC,MAAO,CAACC,SAAU,UAC7C,yBAAKF,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKG,IAAKJ,EAAMK,QAASJ,UAAU,WAAWK,IAAI,SAEtD,yBAAKL,UAAU,YACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAa,uBAAGM,KAAK,IAAIC,QAASR,EAAMS,MAAMC,KAAKC,KAAMX,EAAMY,KAAM,uBAAGX,UAAU,oEAAhG,IAA4KD,EAAMa,MAC9K,uBAAGZ,UAAU,aAAY,uBAAGM,KAAK,KAAKP,EAAMc,MAA5C,IAAsD,6BAC7Cd,EAAMe,aAEnB,uBAAGd,UAAU,aAAY,2BAAOA,UAAU,cAAjB,gBAA2C,yBAAKG,IAAKJ,EAAMK,QAASJ,UAAU,4BAA4BK,IAAI,MAAMJ,MAAO,CAAEc,MAAM,OAAQC,QAAQ,yBCsCxLC,G,wNAlDZC,MAAO,CACJC,cAAgB,CACf,CAACR,GAAI,EAAGC,KAAM,GAAIC,KAAM,mBAAoBC,YAAa,4CAA6CV,QAAQ,yGAC9G,CAACO,GAAI,EAAGC,KAAM,GAAIC,KAAM,uBAAwBC,YAAa,wCAAyCV,QAAQ,yGAC9G,CAACO,GAAI,EAAGC,KAAM,GAAIC,KAAM,qBAAsBC,YAAa,yBAA0BV,QAAQ,yGAC7F,CAACO,GAAI,EAAGC,KAAM,GAAIC,KAAM,eAAgBC,YAAa,+BAAgCV,QAAQ,2G,EAIhGI,MAAO,SAACG,EAAIS,GACRA,EAAEC,iBAEH,IAAMC,EAAU,EAAKJ,MAAMC,cAAcI,KAAI,SAAAC,GACzC,OAAIb,IAAMa,EAAKb,IACXa,EAAKZ,KAAOY,EAAKZ,KAAO,EACjBY,GAEJA,KAGZ,EAAKC,SAAS,CACVN,cAAgBG,K,uDAMZ,IAAD,OAENZ,KAAKQ,MAAMC,cAAcO,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEhB,KAAOe,EAAEf,QACnD,IAAMU,EAAWZ,KAAKQ,MAAMC,cAAcI,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAClDK,IAAKL,EAAKb,GACVA,GAAIa,EAAKb,GACTC,KAAOY,EAAKZ,KACZC,KAAQW,EAAKX,KACbC,YAAaU,EAAKV,YAClBV,QAAUoB,EAAKpB,QACfI,MAAO,EAAKA,WAGhB,OACI,yBAAKP,MAAO,CAAE6B,OAAO,OAAQC,SAAU,QAAS7B,SAAS,UACrD,kFAEA,6BACCoB,O,GA/CCU,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b9a94fd.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Item(props) {\n  \n         \n            return ( \n          \n\n                <div className=\"card mb-3\" style={{maxWidth: '540px'}}>\n                <div className=\"row no-gutters\">\n                    <div className=\"col-md-4\">\n                        <img src={props.profile} className=\"card-img\" alt=\"...\" />\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\"><a href=\"#\" onClick={props.voter.bind(this, props.id )}><i className=\"fa fa-angle-up fa-2x bg-success text-white rounded-circle px-1\"></i></a> { props.vote}</h5>\n                                <p className=\"card-text\"><a href=\"#\">{props.name}</a> <br/>\n                                        {props.description}\n                                </p>\n                            <p className=\"card-text\"><small className=\"text-muted\">Submitted by <img src={props.profile} className=\"rounded-circle img-fluid \" alt=\"...\" style={{ width:'50px', display:'inline-block' }} /></small></p>\n                        </div>\n                    </div>\n                </div>\n                </div>\n\n            \n\n        )\n\n}\nexport default Item;","import React, { Component } from 'react'\r\nimport Item from './Item'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nclass App extends Component {\r\n\r\n    state= {\r\n       renseignement : [\r\n        {id: 0, vote: 10, name: 'Haught or Naught', description: 'High-minded or absent-minded ? You decide', profile:'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSBLxYRXpOqfadu0767-vEj4VPmZ75YRfxwRw&usqp=CAU'},\r\n        {id: 1, vote: 13, name: 'Tinfoild : Tailored ', description: ' We already absent-minded  You decide', profile:'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSrfoYdFbYWeUb75Nuu0ygQJ-scyMhIfUZBrA&usqp=CAU'},\r\n        {id: 2, vote: 20, name: 'Extention prettier', description: 'esbenp.prettier-vscode', profile:'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRoIqB3MnFscz5bS-g32vjDn0JN9nSD0r9-oA&usqp=CAU'},\r\n        {id: 3, vote: 25, name: 'Codeloccol  ', description: ' I am like to code in my ...', profile:'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ6YO6FOS711bbZ512Wtc6zq-ywNPFuauDGVg&usqp=CAU'}\r\n        ]\r\n    }\r\n\r\n     voter= (id, e) => {\r\n         e.preventDefault()\r\n         \r\n        const resultat =this.state.renseignement.map(item => {\r\n            if (id=== item.id){\r\n                item.vote = item.vote + 1;\r\n                return item\r\n            }\r\n            return item\r\n        })\r\n        \r\n       this.setState({\r\n           renseignement : resultat\r\n       })\r\n        \r\n        \r\n    }\r\n\r\n    render () {\r\n\r\n        this.state.renseignement.sort((a, b) => b.vote - a.vote)\r\n        const resultat = this.state.renseignement.map(item => <Item \r\n            key={item.id}\r\n            id={item.id}\r\n            vote ={item.vote}\r\n            name = {item.name}\r\n            description={item.description}\r\n            profile ={item.profile}\r\n            voter={this.voter}\r\n            /> )\r\n\r\n        return (\r\n            <div style={{ margin:'auto', minWidth: '500px', maxWidth:'600px' }}>\r\n                <h3>Popular apps for voting.\r\nClick on the icon to vote</h3>\r\n                <hr/>\r\n                {resultat}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default  App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}